{"version":3,"sources":["../../src/workers/serviceworker-cache-polyfill.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,MAAM,SAAN,CAAgB,GAAhB,EAAqB;AACxB,QAAM,SAAN,CAAgB,GAAhB,GAAsB,SAAS,GAAT,CAAa,OAAb,EAAsB;AAC1C,WAAO,KAAK,MAAL,CAAY,CAAC,OAAD,CAAZ,CAAP,CAD0C;GAAtB,CADE;CAA1B;;AAMA,IAAI,CAAC,MAAM,SAAN,CAAgB,MAAhB,EAAwB;AAC3B,QAAM,SAAN,CAAgB,MAAhB,GAAyB,SAAS,MAAT,CAAgB,QAAhB,EAA0B;AACjD,QAAI,QAAQ,IAAR;;;AAD6C,aAIxC,YAAT,CAAsB,OAAtB,EAA+B;AAC7B,WAAK,IAAL,GAAY,cAAZ,CAD6B;AAE7B,WAAK,IAAL,GAAY,EAAZ,CAF6B;AAG7B,WAAK,OAAL,GAAe,OAAf,CAH6B;KAA/B;AAKA,iBAAa,SAAb,GAAyB,OAAO,MAAP,CAAc,MAAM,SAAN,CAAvC,CATiD;;AAWjD,WAAO,QAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAW;AACvC,UAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB,MAAM,IAAI,SAAJ,EAAN,CAA1B;;;AADuC,UAInC,WAAW,EAAX,CAJmC;;AAMvC,iBAAW,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB;AACxC,YAAI,mBAAmB,OAAnB,EAA4B;AAC9B,iBAAO,OAAP,CAD8B;SAAhC,MAGK;AACH,iBAAO,OAAO,OAAP,CAAP;AADG,SAHL;OADsB,CAAxB,CANuC;;AAevC,aAAO,QAAQ,GAAR,CACL,SAAS,GAAT,CAAa,UAAS,OAAT,EAAkB;AAC7B,YAAI,OAAO,OAAP,KAAmB,QAAnB,EAA6B;AAC/B,oBAAU,IAAI,OAAJ,CAAY,OAAZ,CAAV,CAD+B;SAAjC;;AAIA,YAAI,SAAS,IAAI,GAAJ,CAAQ,QAAQ,GAAR,CAAR,CAAqB,QAArB,CALgB;;AAO7B,YAAI,WAAW,OAAX,IAAsB,WAAW,QAAX,EAAqB;AAC7C,gBAAM,IAAI,YAAJ,CAAiB,gBAAjB,CAAN,CAD6C;SAA/C;;AAIA,eAAO,MAAM,QAAQ,KAAR,EAAN,CAAP,CAX6B;OAAlB,CADR,CAAP,CAfuC;KAAX,CAAvB,CA8BJ,IA9BI,CA8BC,UAAS,SAAT,EAAoB;;;AAG1B,aAAO,QAAQ,GAAR,CACL,UAAU,GAAV,CAAc,UAAS,QAAT,EAAmB,CAAnB,EAAsB;AAClC,eAAO,MAAM,GAAN,CAAU,SAAS,CAAT,CAAV,EAAuB,QAAvB,CAAP,CADkC;OAAtB,CADT,CAAP,CAH0B;KAApB,CA9BD,CAsCJ,IAtCI,CAsCC,YAAW;AACjB,aAAO,SAAP,CADiB;KAAX,CAtCR,CAXiD;GAA1B,CADE;CAA7B","file":"serviceworker-cache-polyfill.js","sourcesContent":["if (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n\n      // Simulate sequence<(Request or USVString)> binding:\n      var sequence = [];\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError('Invalid scheme');\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n"]}