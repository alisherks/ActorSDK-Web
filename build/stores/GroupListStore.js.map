{"version":3,"sources":["../../src/stores/GroupListStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAV;IACA,QAAQ,EAAR;IACA,WAAW,EAAX;;;;;;IAKE;;;AACJ,WADI,UACJ,CAAY,UAAZ,EAAwB;0BADpB,YACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;;;;;;AADI,uBAQJ,2BAAS;AACP,WAAO,OAAP,CADO;;;;;;;;AARL,uBAeJ,6BAAU;AACR,WAAO,KAAP,CADQ;;;;;;;;AAfN,uBAsBJ,mCAAa;AACX,WAAO,QAAP,CADW;;;AAtBT,uBA2BJ,+CAAkB,OAAO;AACvB,QAAI,UAAU,EAAV,CADmB;;AAGvB,QAAI,UAAU,EAAV,EAAc;AAChB,gBAAU,KAAV,CADgB;KAAlB,MAEO;AACL,2BAAQ,KAAR,EAAe,UAAC,MAAD,EAAY;AACzB,YAAM,QAAQ,OAAO,QAAP,CAAgB,KAAhB,CAAsB,WAAtB,EAAR,CADmB;AAEzB,YAAI,MAAM,QAAN,CAAe,MAAM,WAAN,EAAf,CAAJ,EAAyC;AACvC,kBAAQ,IAAR,CAAa,MAAb,EADuC;SAAzC;OAFa,CAAf,CADK;KAFP;;AAWA,eAAW,OAAX,CAduB;;;AA3BrB,uBA4CJ,qCAAa,QAAQ;AACnB,YAAQ,OAAO,IAAP;AACN,WAAK,+BAAY,eAAZ;AACH,kBAAW,IAAX,CADF;AAEE,aAAK,iBAAL,CAAuB,EAAvB,EAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;AADF,WAMO,+BAAY,eAAZ;AACH,kBAAW,KAAX,CADF;AAEE,mBAAW,EAAX,CAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;;AANF,WAYO,+BAAY,uBAAZ;AACH,gBAAQ,OAAO,QAAP,CADV;AAEE,aAAK,iBAAL,CAAuB,EAAvB,EAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;AAZF,WAiBO,+BAAY,qBAAZ;AACH,gBAAQ,KAAR,CAAc,OAAO,KAAP,CAAd,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAjBF,WAsBO,+BAAY,iBAAZ;AACH,aAAK,iBAAL,CAAuB,OAAO,KAAP,CAAvB,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAtBF;KADmB;;;SA5CjB;;;kBA6ES,IAAI,UAAJ","file":"GroupListStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { forEach } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _list = [],\n    _results = [];\n\n/**\n * Class representing a store for searchable group list.\n */\nclass GroupStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isOpen() {\n    return _isOpen;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getList() {\n    return _list;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getResults() {\n    return _results;\n  }\n\n\n  handleSearchQuery(query) {\n    let results = [];\n\n    if (query === '') {\n      results = _list;\n    } else {\n      forEach(_list, (result) => {\n        const title = result.peerInfo.title.toLowerCase();\n        if (title.includes(query.toLowerCase())) {\n          results.push(result);\n        }\n      })\n    }\n\n    _results = results;\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.GROUP_LIST_SHOW:\n        _isOpen  = true;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_LIST_HIDE:\n        _isOpen  = false;\n        _results = [];\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_LIST_LOAD_SUCCESS:\n        _list = action.response;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_LIST_LOAD_ERROR:\n        console.error(action.error);\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_LIST_SEARCH:\n        this.handleSearchQuery(action.query);\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new GroupStore(Dispatcher);\n"]}