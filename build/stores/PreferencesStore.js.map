{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAV;IACA,YAAY,EAAZ;IACA,cAAc,SAAd;IACA,yBAAyB,EAAzB;;IAEE;;;AACJ,WADI,gBACJ,CAAY,UAAZ,EAAwB;0BADpB,kBACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;AADI,6BAKJ,2BAAS;AACP,WAAO,OAAP,CADO;;;AALL,6BASJ,uDAAuB;AACrB,WAAO,sBAAY,oBAAZ,EAAP,CADqB;;;AATnB,6BAaJ,uEAA+B;AAC7B,WAAO,sBAAY,4BAAZ,EAAP,CAD6B;;;AAb3B,6BAiBJ,mEAA6B;AAC3B,WAAO,sBAAY,0BAAZ,EAAP,CAD2B;;;AAjBzB,6BAqBJ,yDAAwB;AACtB,WAAO,sBAAY,qBAAZ,EAAP,CADsB;;;AArBpB,6BAyBJ,2EAAiC;AAC/B,WAAO,sBAAY,8BAAZ,EAAP,CAD+B;;;AAzB7B,6BA6BJ,qCAAc;AACZ,WAAO,SAAP,CADY;;;AA7BV,6BAiCJ,yCAAgB;AACd,WAAO,WAAP,CADc;;;AAjCZ,6BAqCJ,6DAAyB,IAAI;AAC3B,WAAQ,uBAAuB,EAAvB,KAA8B,qCAAkB,OAAlB,CADX;;;AArCzB,6BA0CJ,2CAAgB,gBAAgB;QAE5B,uBAKE,eALF,qBAF4B;QAG5B,wBAIE,eAJF,sBAH4B;QAI5B,+BAGE,eAHF,6BAJ4B;QAK5B,6BAEE,eAFF,2BAL4B;QAM5B,iCACE,eADF,+BAN4B;;;AAS9B,0BAAY,iBAAZ,CAA8B,oBAA9B,EAT8B;AAU9B,0BAAY,yBAAZ,CAAsC,qBAAtC,EAV8B;AAW9B,0BAAY,+BAAZ,CAA4C,4BAA5C,EAX8B;AAY9B,0BAAY,gCAAZ,CAA6C,0BAA7C,EAZ8B;AAa9B,0BAAY,mCAAZ,CAAgD,8BAAhD,EAb8B;;;AA1C5B,6BA0DJ,qCAAa,QAAQ;AACnB,YAAO,OAAO,IAAP;AACL,WAAK,+BAAY,sBAAZ;AACH,kBAAU,IAAV,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AADF,WAKO,+BAAY,sBAAZ;AACH,kBAAU,KAAV,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AALF,WASO,+BAAY,gBAAZ;AACH,aAAK,eAAL,CAAqB,OAAO,WAAP,CAArB,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AATF,WAaO,+BAAY,gCAAZ;AACH,oBAAY,OAAO,QAAP,CADd;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAbF,WAiBO,+BAAY,sBAAZ;AACH,sBAAc,OAAO,GAAP,CADhB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAjBF,WAsBO,+BAAY,6BAAZ;AACH,+BAAuB,OAAO,EAAP,CAAvB,GAAoC,qCAAkB,UAAlB,CADtC;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAtBF,WA0BO,+BAAY,qCAAZ;AACH,eAAO,uBAAuB,OAAO,EAAP,CAA9B,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AA1BF,WA8BO,+BAAY,mCAAZ;AACH,+BAAuB,OAAO,EAAP,CAAvB,GAAoC,qCAAkB,OAAlB,CADtC;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AA9BF;KADmB;;;SA1DjB;;;kBAmGS,IAAI,gBAAJ","file":"PreferencesStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _sessions = [],\n    _currentTab = 'GENERAL',\n    _terminateSessionState = [];\n\nclass PreferencesStore extends Store {\n  constructor(Dispatcher) {\n    super(Dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  isSendByEnterEnabled() {\n    return ActorClient.isSendByEnterEnabled();\n  }\n\n  isGroupsNotificationsEnabled() {\n    return ActorClient.isGroupsNotificationsEnabled();\n  }\n\n  isOnlyMentionNotifications() {\n    return ActorClient.isOnlyMentionNotifications();\n  }\n\n  isSoundEffectsEnabled() {\n    return ActorClient.isSoundEffectsEnabled();\n  }\n\n  isShowNotificationsTextEnabled() {\n    return ActorClient.isShowNotificationsTextEnabled();\n  }\n\n  getSessions() {\n    return _sessions;\n  }\n\n  getCurrentTab() {\n    return _currentTab;\n  }\n\n  getTerminateSessionState(id) {\n    return (_terminateSessionState[id] || AsyncActionStates.PENDING);\n  }\n\n\n  savePreferences(newPreferences) {\n    const {\n      isSendByEnterEnabled,\n      isSoundEffectsEnabled,\n      isGroupsNotificationsEnabled,\n      isOnlyMentionNotifications,\n      isShowNotificationsTextEnabled\n    } = newPreferences;\n\n    ActorClient.changeSendByEnter(isSendByEnterEnabled);\n    ActorClient.changeSoundEffectsEnabled(isSoundEffectsEnabled);\n    ActorClient.changeGroupNotificationsEnabled(isGroupsNotificationsEnabled);\n    ActorClient.changeIsOnlyMentionNotifications(isOnlyMentionNotifications);\n    ActorClient.changeIsShowNotificationTextEnabled(isShowNotificationsTextEnabled);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.PREFERENCES_MODAL_SHOW:\n        _isOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\n        _isOpen = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SAVE:\n        this.savePreferences(action.preferences);\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\n        _sessions = action.response;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\n        _currentTab = action.tab;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\n        _terminateSessionState[action.id] = AsyncActionStates.PROCESSING;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\n        delete _terminateSessionState[action.id];\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\n        _terminateSessionState[action.id] = AsyncActionStates.FAILURE;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  };\n}\n\nexport default new PreferencesStore(Dispatcher);\n"]}