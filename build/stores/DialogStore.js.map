{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;IAEM;;;AACJ,WADI,WACJ,CAAY,UAAZ,EAAwB;0BADpB,aACoB;;iDACtB,kBAAM,UAAN,GADsB;;AAGtB,UAAK,OAAL,GAAe,EAAf,CAHsB;AAItB,UAAK,WAAL,GAAmB,IAAnB,CAJsB;AAKtB,UAAK,QAAL,GAAgB,IAAhB,CALsB;;GAAxB;;AADI,wBASJ,mCAAa;AACX,WAAO,KAAK,OAAL,CADI;;;AATT,wBAaJ,2CAAiB;AACf,WAAO,KAAK,WAAL,CADQ;;;AAbb,wBAiBJ,qCAAc;AACZ,WAAO,KAAK,QAAL,CADK;;;AAjBV,wBAqBJ,+BAAW;AACT,QAAI,KAAK,WAAL,KAAqB,IAArB,IAA6B,KAAK,WAAL,CAAiB,IAAjB,KAA0B,6BAAU,KAAV,EAAiB;AAC1E,UAAM,QAAQ,sBAAY,QAAZ,CAAqB,KAAK,WAAL,CAAiB,EAAjB,CAA7B,CADoE;AAE1E,aAAO,SAAS,MAAM,OAAN,CAAc,MAAd,KAAyB,CAAzB,CAF0D;KAA5E;;AAKA,WAAO,IAAP,CANS;;;AArBP,wBA8BJ,iCAAW,IAAI;AACb,QAAM,kBAAkB,kBAAK,KAAK,OAAL,EAAc,EAAC,KAAK,YAAL,EAApB,CAAlB,CADO;AAEb,QAAI,CAAC,eAAD,EAAkB,OAAO,KAAP,CAAtB;;AAEA,WAAO,kBAAK,gBAAgB,MAAhB,EAAwB,UAAC,MAAD;aAAY,OAAO,IAAP,CAAY,IAAZ,CAAiB,EAAjB,KAAwB,EAAxB;KAAZ,CAApC,CAJa;;;AA9BX,wBAqCJ,qCAAa,QAAQ;AACnB,YAAO,OAAO,IAAP;AACL,WAAK,+BAAY,eAAZ;AACH,aAAK,OAAL,GAAe,OAAO,OAAP,CADjB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AADF,WAKO,+BAAY,gBAAZ;AACH,aAAK,WAAL,GAAmB,OAAO,IAAP,CADrB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AALF,WASO,+BAAY,kBAAZ;AACH,aAAK,QAAL,GAAgB,OAAO,IAAP,CADlB;AAEE,aAAK,WAAL,GAAmB,IAAnB,CAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;AATF;KADmB;;;SArCjB;;;kBAyDS,IAAI,WAAJ","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nclass DialogStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this.dialogs = [];\n    this.currentPeer = null;\n    this.lastPeer = null;\n  }\n\n  getDialogs() {\n    return this.dialogs;\n  }\n\n  getCurrentPeer() {\n    return this.currentPeer;\n  }\n\n  getLastPeer() {\n    return this.lastPeer;\n  }\n\n  isMember() {\n    if (this.currentPeer !== null && this.currentPeer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(this.currentPeer.id);\n      return group && group.members.length !== 0;\n    }\n\n    return true;\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.dialogs, {key: 'favourites'});\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n        this.dialogs = action.dialogs;\n        this.__emitChange();\n        break;\n      case ActionTypes.BIND_DIALOG_PEER:\n        this.currentPeer = action.peer;\n        this.__emitChange();\n        break;\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        this.lastPeer = action.peer;\n        this.currentPeer = null;\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}