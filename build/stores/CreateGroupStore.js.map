{"version":3,"sources":["../../src/stores/CreateGroupStore.js"],"names":[],"mappings":";;;;AAIA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,aAAa,KAAb;IACA,eAAe,oCAAiB,UAAjB;IACf,aAAa,EAAb;IACA,mBAAmB,IAAI,oBAAU,GAAV,EAAvB;;IAEE;;;AACJ,WADI,gBACJ,CAAY,UAAZ,EAAwB;0BADpB,kBACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;AADI,6BAKJ,qCAAc;AACZ,WAAO,UAAP,CADY;;;AALV,6BASJ,2CAAiB;AACf,WAAO,YAAP,CADe;;;AATb,6BAaJ,uCAAe;AACb,WAAO,UAAP,CADa;;;AAbX,6BAiBJ,mDAAqB;AACnB,WAAO,gBAAP,CADmB;;;AAjBjB,6BAqBJ,mCAAa;AACX,iBAAa,KAAb,CADW;AAEX,mBAAe,oCAAiB,UAAjB,CAFJ;AAGX,iBAAa,EAAb,CAHW;AAIX,uBAAmB,IAAI,oBAAU,GAAV,EAAvB,CAJW;;;AArBT,6BA4BJ,qCAAa,QAAQ;AACnB,YAAQ,OAAO,IAAP;;AAEN,WAAK,+BAAY,uBAAZ;AACH,qBAAa,IAAb,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAFF,WAMO,+BAAY,wBAAZ;AACH,aAAK,UAAL,GADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AANF,WAWO,+BAAY,qBAAZ;AACH,uBAAe,oCAAiB,kBAAjB,CADjB;AAEE,qBAAa,OAAO,IAAP,CAFf;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;;;;;;;AAXF,WAsBO,+BAAY,wBAAZ;AACH,2BAAmB,OAAO,eAAP,CADrB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAtBF,WA2BO,+BAAY,YAAZ;AACH,uBAAe,oCAAiB,gBAAjB,CADjB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AA3BF,WA+BO,+BAAY,oBAAZ;AACH,aAAK,UAAL,GADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AA/BF,WAmCO,+BAAY,kBAAZ;AACH,gBAAQ,KAAR,CAAc,wBAAd,EAAwC,OAAO,KAAP,CAAxC,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAnCF,KADmB;;;SA5BjB;;;kBAwES,IAAI,gBAAJ","file":"CreateGroupStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport keymirror from 'keymirror';\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, CreateGroupSteps } from '../constants/ActorAppConstants';\n\nlet _modalOpen = false,\n    _currentStep = CreateGroupSteps.NAME_INPUT,\n    _groupName = '',\n    _selectedUserIds = new Immutable.Set();\n\nclass CreateGroupStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isModalOpen() {\n    return _modalOpen;\n  }\n\n  getCurrentStep() {\n    return _currentStep;\n  }\n\n  getGroupName() {\n    return _groupName;\n  }\n\n  getSelectedUserIds() {\n    return _selectedUserIds;\n  }\n\n  resetStore() {\n    _modalOpen = false;\n    _currentStep = CreateGroupSteps.NAME_INPUT;\n    _groupName = '';\n    _selectedUserIds = new Immutable.Set();\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n\n      case ActionTypes.GROUP_CREATE_MODAL_OPEN:\n        _modalOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_MODAL_CLOSE:\n        this.resetStore();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_CREATE_SET_NAME:\n        _currentStep = CreateGroupSteps.CONTACTS_SELECTION;\n        _groupName = action.name;\n        this.__emitChange();\n        break;\n\n      //case ActionTypes.GROUP_CREATE_SET_AVATAR:\n      //  _avatar = action.avatar;\n      //  this.__emitChange();\n      //  break;\n\n      case ActionTypes.GROUP_CREATE_SET_MEMBERS:\n        _selectedUserIds = action.selectedUserIds;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_CREATE:\n        _currentStep = CreateGroupSteps.CREATION_STARTED;\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_SUCCESS:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_ERROR:\n        console.error('Failed to create group', action.error);\n        this.__emitChange();\n        break;\n    }\n  };\n}\n\nexport default new CreateGroupStore(Dispatcher);\n"]}