{"version":3,"sources":["../../src/stores/InviteUserStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AAEA,IAAM,eAAe,QAAf;;AAEN,IAAI,qBAAqB,KAArB;IACA,2BAA2B,KAA3B;IACA,SAAS,IAAT;IACA,aAAa,IAAb;IACA,mBAAmB,EAAnB;;IAEE;;;;;;;;;4BACJ,mCAAa;AACX,SAAK,IAAL,CAAU,YAAV,EADW;;;AADT,4BAKJ,+CAAkB,UAAU;AAC1B,SAAK,EAAL,CAAQ,YAAR,EAAsB,QAAtB,EAD0B;;;AALxB,4BASJ,qDAAqB,UAAU;AAC7B,SAAK,cAAL,CAAoB,YAApB,EAAkC,QAAlC,EAD6B;;;AAT3B,4BAaJ,qCAAc;AACZ,WAAO,kBAAP,CADY;;;AAbV,4BAiBJ,iEAA4B;AAC1B,WAAO,wBAAP,CAD0B;;;AAjBxB,4BAqBJ,+BAAW;AACT,WAAO,MAAP,CADS;;;AArBP,4BAyBJ,uCAAe;AACb,WAAO,UAAP,CADa;;;AAzBX,4BA6BJ,iDAAmB,KAAK;AACtB,WAAQ,iBAAiB,GAAjB,KAAyB,qCAAkB,OAAlB,CADX;;;AA7BpB,4BAiCJ,qDAAqB,KAAK;AACxB,WAAO,iBAAiB,GAAjB,CAAP,CADwB;;;SAjCtB;;;AAsCN,IAAI,0BAA0B,IAAI,eAAJ,EAA1B;;AAEJ,wBAAwB,aAAxB,GAAwC,kCAAS,kBAAU;AACzD,UAAO,OAAO,IAAP;AACL,SAAK,+BAAY,mBAAZ;AACH,eAAS,OAAO,IAAP,CADX;AAEE,8BAAwB,UAAxB,GAFF;AAGE,YAHF;;AADF,SAMO,+BAAY,sBAAZ;AACH,2BAAqB,IAArB,CADF;AAEE,eAAS,OAAO,KAAP,CAFX;AAGE,8BAAwB,UAAxB,GAHF;AAIE,YAJF;AANF,SAWO,+BAAY,sBAAZ;AACH,yBAAmB,EAAnB,CADF;AAEE,2BAAqB,KAArB,CAFF;AAGE,8BAAwB,UAAxB,GAHF;AAIE,YAJF;;AAXF,SAiBO,+BAAY,8BAAZ;AACH,iCAA2B,IAA3B,CADF;AAEE,eAAS,OAAO,KAAP,CAFX;AAGE,4BAAY,YAAZ,CAAyB,OAAO,EAAP,CAAzB,CACG,IADH,CACQ,UAAC,GAAD,EAAS;AACb,qBAAa,GAAb,CADa;AAEb,gCAAwB,UAAxB,GAFa;OAAT,CADR,CAHF;AAQE,8BAAwB,UAAxB,GARF;AASE,YATF;AAjBF,SA2BO,+BAAY,8BAAZ;AACH,iCAA2B,KAA3B,CADF;AAEE,8BAAwB,UAAxB,GAFF;AAGE,YAHF;;;AA3BF,SAiCO,+BAAY,WAAZ;AACH,uBAAiB,OAAO,GAAP,CAAjB,GAA+B,qCAAkB,UAAlB,CADjC;AAEE,8BAAwB,UAAxB,GAFF;AAGE,YAHF;AAjCF,SAqCO,+BAAY,mBAAZ;AACH,uBAAiB,OAAO,GAAP,CAAjB,GAA+B,qCAAkB,OAAlB,CADjC;AAEE,8BAAwB,UAAxB,GAFF;AAGE,YAHF;AArCF,SAyCO,+BAAY,iBAAZ;AACH,uBAAiB,OAAO,GAAP,CAAjB,GAA+B,qCAAkB,OAAlB,CADjC;AAEE,8BAAwB,UAAxB,GAFF;AAGE,YAHF;AAzCF,GADyD;CAAV,CAAjD;;kBAiDe","file":"InviteUserStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { EventEmitter } from 'events';\nimport { register } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nconst CHANGE_EVENT = 'change';\n\nlet _isInviteModalOpen = false,\n    _isInviteByLinkModalOpen = false,\n    _group = null,\n    _inviteUrl = null,\n    _inviteUserState = [];\n\nclass InviteUserStore extends EventEmitter {\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  isModalOpen() {\n    return _isInviteModalOpen;\n  }\n\n  isInviteWithLinkModalOpen() {\n    return _isInviteByLinkModalOpen;\n  }\n\n  getGroup() {\n    return _group;\n  }\n\n  getInviteUrl() {\n    return _inviteUrl;\n  }\n\n  getInviteUserState(uid) {\n    return (_inviteUserState[uid] || AsyncActionStates.PENDING);\n  }\n\n  resetInviteUserState(uid) {\n    delete _inviteUserState[uid];\n  }\n}\n\nlet InviteUserStoreInstance = new InviteUserStore();\n\nInviteUserStoreInstance.dispatchToken = register(action => {\n  switch(action.type) {\n    case ActionTypes.DIALOG_INFO_CHANGED:\n      _group = action.info;\n      InviteUserStoreInstance.emitChange();\n      break;\n\n    case ActionTypes.INVITE_USER_MODAL_SHOW:\n      _isInviteModalOpen = true;\n      _group = action.group;\n      InviteUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.INVITE_USER_MODAL_HIDE:\n      _inviteUserState = [];\n      _isInviteModalOpen = false;\n      InviteUserStoreInstance.emitChange();\n      break;\n\n    case ActionTypes.INVITE_USER_BY_LINK_MODAL_SHOW:\n      _isInviteByLinkModalOpen = true;\n      _group = action.group;\n      ActorClient.getInviteUrl(_group.id)\n        .then((url) => {\n          _inviteUrl = url;\n          InviteUserStoreInstance.emitChange();\n        });\n      InviteUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.INVITE_USER_BY_LINK_MODAL_HIDE:\n      _isInviteByLinkModalOpen = false;\n      InviteUserStoreInstance.emitChange();\n      break;\n\n    // Invite user\n    case ActionTypes.INVITE_USER:\n      _inviteUserState[action.uid] = AsyncActionStates.PROCESSING;\n      InviteUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.INVITE_USER_SUCCESS:\n      _inviteUserState[action.uid] = AsyncActionStates.SUCCESS;\n      InviteUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.INVITE_USER_ERROR:\n      _inviteUserState[action.uid] = AsyncActionStates.FAILURE;\n      InviteUserStoreInstance.emitChange();\n      break;\n  }\n});\n\nexport default InviteUserStoreInstance;\n"]}