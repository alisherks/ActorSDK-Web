{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;AAIA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,YAAY,EAAZ;AACJ,IAAI,WAAW,EAAX;AACJ,IAAI,YAAY,KAAZ;AACJ,IAAI,oBAAoB,IAAI,oBAAU,GAAV,EAAxB;;;;;;IAKE;;;AACJ,WADI,YACJ,CAAY,UAAZ,EAAwB;0BADpB,cACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;;;;;;AADI,yBAQJ,2BAAS;AACP,WAAO,SAAP,CADO;;;;;;;;AARL,yBAeJ,mCAAa;AACX,WAAO,QAAP,CADW;;;AAfT,yBAmBJ,+BAAW;AACT,WAAO,SAAP,CADS;;;;;;;;AAnBP,yBA0BJ,qCAAc;AACZ,WAAO,iBAAP,CADY;;;AA1BV,yBA8BJ,qCAAa,QAAQ;AACnB,YAAO,OAAO,IAAP;AACL,WAAK,+BAAY,kBAAZ;AACH,4BAAoB,IAAI,oBAAU,GAAV,EAAxB,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AADF,WAMO,+BAAY,gBAAZ;AACH,oBAAY,OAAO,QAAP,CADd;AAEE,mBAAW,OAAO,OAAP,CAFb;AAGE,oBAAY,OAAO,QAAP,CAHd;AAIE,aAAK,YAAL,GAJF;AAKE,cALF;;AANF,WAaO,+BAAY,qBAAZ;AACH,4BAAoB,OAAO,eAAP,CADtB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAbF;KADmB;;;SA9BjB;;;kBAsDS,IAAI,YAAJ","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _messages = [];\nlet _overlay = [];\nlet _isLoaded = false;\nlet _selectedMessages = new Immutable.Set();\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return _messages;\n  }\n\n  /**\n   * @returns {Array} Meesages overlay\n   */\n  getOverlay() {\n    return _overlay;\n  }\n\n  isLoaded() {\n    return _isLoaded;\n  }\n\n  /**\n   * @returns {Array} Selected messages\n   */\n  getSelected() {\n    return _selectedMessages;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.SELECT_DIALOG_PEER:\n        _selectedMessages = new Immutable.Set();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_CHANGED:\n        _messages = action.messages;\n        _overlay = action.overlay;\n        _isLoaded = action.isLoaded;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        _selectedMessages = action.selectedMesages;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}