{"version":3,"sources":["../../src/stores/PeopleStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAV;IACA,QAAQ,EAAR;IACA,WAAW,EAAX;;;;;;IAKE;;;AACJ,WADI,WACJ,CAAY,UAAZ,EAAwB;0BADpB,aACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;;;;;;AADI,wBAQJ,2BAAS;AACP,WAAO,OAAP,CADO;;;;;;;;AARL,wBAeJ,6BAAU;AACR,WAAO,KAAP,CADQ;;;;;;;;AAfN,wBAsBJ,mCAAa;AACX,WAAO,QAAP,CADW;;;AAtBT,wBA2BJ,+CAAkB,OAAO;AACvB,QAAI,UAAU,EAAV,CADmB;;AAGvB,QAAI,UAAU,EAAV,EAAc;AAChB,gBAAU,KAAV,CADgB;KAAlB,MAEO;AACL,2BAAQ,KAAR,EAAe,UAAC,MAAD,EAAY;AACzB,YAAM,OAAO,OAAO,IAAP,CAAY,WAAZ,EAAP,CADmB;AAEzB,YAAI,KAAK,QAAL,CAAc,MAAM,WAAN,EAAd,CAAJ,EAAwC;AACtC,kBAAQ,IAAR,CAAa,MAAb,EADsC;SAAxC;OAFa,CAAf,CADK;KAFP;;AAWA,eAAW,OAAX,CAduB;;;AA3BrB,wBA4CJ,qCAAa,QAAQ;AACnB,YAAQ,OAAO,IAAP;AACN,WAAK,+BAAY,iBAAZ;AACH,kBAAW,IAAX,CADF;AAEE,aAAK,iBAAL,CAAuB,EAAvB,EAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;AADF,WAMO,+BAAY,iBAAZ;AACH,kBAAW,KAAX,CADF;AAEE,mBAAW,EAAX,CAFF;AAGE,aAAK,YAAL,GAHF;AAIE,cAJF;;AANF,WAYO,+BAAY,oBAAZ;;AAEH,gBAAQ,oBAAO,OAAO,QAAP,EAAiB,UAAC,OAAD,EAAa;AAC3C,cAAI,QAAQ,GAAR,IAAe,sBAAY,MAAZ,EAAf,EAAqC;AACvC,mBAAO,OAAP,CADuC;WAAzC;SAD8B,CAAhC,CAFF;AAOE,aAAK,YAAL,GAPF;AAQE,cARF;;AAZF,WAsBO,+BAAY,mBAAZ;AACH,aAAK,iBAAL,CAAuB,OAAO,KAAP,CAAvB,CADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAtBF,WA2BO,+BAAY,WAAZ,CA3BP;AA4BE,WAAK,+BAAY,cAAZ;AACH,aAAK,YAAL,GADF;AAEE,cAFF;AA5BF;KADmB;;;SA5CjB;;;kBAiFS,IAAI,WAAJ","file":"PeopleStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { forEach, filter } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _list = [],\n    _results = [];\n\n/**\n * Class representing a store for searchable people list.\n */\nclass PeopleStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isOpen() {\n    return _isOpen;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getList() {\n    return _list;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getResults() {\n    return _results;\n  }\n\n\n  handleSearchQuery(query) {\n    let results = [];\n\n    if (query === '') {\n      results = _list;\n    } else {\n      forEach(_list, (result) => {\n        const name = result.name.toLowerCase();\n        if (name.includes(query.toLowerCase())) {\n          results.push(result);\n        }\n      })\n    }\n\n    _results = results;\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.CONTACT_LIST_SHOW:\n        _isOpen  = true;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n      case ActionTypes.CONTACT_LIST_HIDE:\n        _isOpen  = false;\n        _results = [];\n        this.__emitChange();\n        break;\n\n      case ActionTypes.CONTACT_LIST_CHANGED:\n        // Remove current user from contacts list\n        _list = filter(action.contacts, (contact) => {\n          if (contact.uid != ActorClient.getUid()) {\n            return contact;\n          }\n        });\n        this.__emitChange();\n        break;\n\n      case ActionTypes.CONTACT_LIST_SEARCH:\n        this.handleSearchQuery(action.query);\n        this.__emitChange();\n        break;\n\n      case ActionTypes.CONTACT_ADD:\n      case ActionTypes.CONTACT_REMOVE:\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new PeopleStore(Dispatcher);\n"]}