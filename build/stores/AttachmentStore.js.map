{"version":3,"sources":["../../src/stores/AttachmentStore.js"],"names":[],"mappings":";;;;AAIA;;AAEA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAV;IACA,eAAe,EAAf;IACA,iBAAiB,CAAjB;;AAEJ,IAAM,kBAAkB,IAAlB;;AAEN,IAAM,aAAa,SAAb,UAAa,CAAC,IAAD,EAAO,QAAP,EAAoB;AACrC,OAAK,gBAAL,GAAwB,KAAK,gBAAL,GAAwB,KAAK,gBAAL,GAAwB,IAAI,IAAJ,EAAhD,CADa;AAErC,OAAK,IAAL,GAAY,WAAW,QAAX,GAAyB,KAAK,gBAAL,SAAyB,KAAK,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAlD,CAFyB;AAGrC,SAAO,IAAP,CAHqC;CAApB;;IAOb;;;AACJ,WADI,eACJ,CAAY,UAAZ,EAAwB;0BADpB,iBACoB;;4CACtB,kBAAM,UAAN,GADsB;GAAxB;;AADI,4BAKJ,2BAAS;AACP,WAAO,OAAP,CADO;;;AALL,4BASJ,iDAAoB;AAClB,WAAO,YAAP,CADkB;;;AAThB,4BAaJ,yCAAsC;QAAxB,8DAAQ,8BAAgB;;AACpC,WAAO,aAAa,KAAb,CAAP,CADoC;;;AAblC,4BAiBJ,+CAAmB;AACjB,WAAO,cAAP,CADiB;;;AAjBf,4BAqBJ,+CAAyC;QAAxB,8DAAQ,8BAAgB;;AACvC,iBAAa,MAAb,CAAoB,KAApB,EAA2B,CAA3B,EADuC;;AAGvC,QAAI,aAAa,MAAb,KAAwB,CAAxB,EAA2B;AAC7B,WAAK,UAAL,GAD6B;KAA/B;;AAIA,qBAAiB,CAAjB;AAPuC;;AArBrC,4BA+BJ,mCAAa;AACX,cAAU,KAAV,CADW;AAEX,mBAAe,EAAf,CAFW;AAGX,qBAAiB,CAAjB,CAHW;;;AA/BT,4BAqCJ,qCAAa,QAAQ;AACnB,YAAQ,OAAO,IAAP;AACN,WAAK,+BAAY,qBAAZ;AACH,kBAAU,IAAV,CADF;AAEE,uBAAe,iBAAI,OAAO,WAAP,EAAoB,UAAC,IAAD,EAAU;AAC/C,cAAI,gBAAgB,IAAhB,IAAwB,KAAxB,EAA+B;AACjC,mBAAO,WAAW,IAAX,CAAP,CADiC;WAAnC;;AAIA,cAAM,UAAU,KAAK,IAAL,CAAU,QAAV,CAAmB,OAAnB,KAA+B,KAAK,IAAL,KAAc,WAAd,CALA;AAM/C,iBAAO;AACL,4BADK;AAEL,2BAAe,eAAf;AACA,sBAHK;WAAP,CAN+C;SAAV,CAAvC,CAFF;AAcE,aAAK,YAAL,GAdF;AAeE,cAfF;AADF,WAiBO,+BAAY,qBAAZ;AACH,aAAK,UAAL,GADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAjBF,WAqBO,+BAAY,iBAAZ;AACH,yBAAiB,OAAO,KAAP,CADnB;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AArBF,WAyBO,+BAAY,iBAAZ;AACH,qBAAa,cAAb,EAA6B,aAA7B,GAA6C,OAAO,aAAP,CAD/C;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAzBF,WA6BO,+BAAY,iBAAZ,CA7BP;AA8BE,WAAK,+BAAY,eAAZ;AACH,aAAK,gBAAL,GADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AA9BF,WAkCO,+BAAY,mBAAZ;AACH,aAAK,UAAL,GADF;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;AAlCF;KADmB;;;SArCjB;;;kBAiFS,IAAI,eAAJ","file":"AttachmentStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { map, remove } from 'lodash';\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _isOpen = false,\n    _attachments = [],\n    _selectedIndex = 0;\n\nconst SEND_AS_PICTURE = true;\n\nconst blobToFile = (blob, fileName) => {\n  blob.lastModifiedDate = blob.lastModifiedDate ? blob.lastModifiedDate : new Date();\n  blob.name = fileName ? fileName : `${blob.lastModifiedDate}.${blob.type.split('/')[1]}`;\n  return blob;\n};\n\n\nclass AttachmentStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  getAllAttachments() {\n    return _attachments;\n  }\n\n  getAttachment(index = _selectedIndex) {\n    return _attachments[index];\n  }\n\n  getSelectedIndex() {\n    return _selectedIndex;\n  }\n\n  deleteAttachment(index = _selectedIndex) {\n    _attachments.splice(index, 1);\n\n    if (_attachments.length === 0) {\n      this.resetStore();\n    }\n\n    _selectedIndex = 0; // TODO: select relevant index\n  }\n\n  resetStore() {\n    _isOpen = false;\n    _attachments = [];\n    _selectedIndex = 0;\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.ATTACHMENT_MODAL_SHOW:\n        _isOpen = true;\n        _attachments = map(action.attachments, (file) => {\n          if (file instanceof File == false) {\n            file = blobToFile(file);\n          }\n\n          const isImage = file.type.includes('image') && file.type !== 'image/gif';\n          return {\n            isImage,\n            sendAsPicture: SEND_AS_PICTURE,\n            file\n          }\n        });\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_MODAL_HIDE:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_SELECT:\n        _selectedIndex = action.index;\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_CHANGE:\n        _attachments[_selectedIndex].sendAsPicture = action.sendAsPicture;\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_DELETE:\n      case ActionTypes.ATTACHMENT_SEND:\n        this.deleteAttachment();\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_SEND_ALL:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      default:\n    }\n  };\n}\n\nexport default new AttachmentStore(Dispatcher);\n"]}