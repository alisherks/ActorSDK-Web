{"version":3,"sources":["../../src/dispatcher/ActorAppDispatcher.js"],"names":[],"mappings":";;;;;;QAIgB;QAIA;QAYA;QAmCA;;AAvDhB;;AAEA,IAAM,OAAO,sBAAP;;AAEC,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AACjC,SAAO,KAAK,QAAL,CAAc,QAAd,CAAP,CADiC;CAA5B;;AAIA,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,SAAO,KAAK,OAAL,CAAa,GAAb,CAAP,CAD2B;CAAtB;;;;;;;;;;AAYA,SAAS,QAAT,CAAkB,IAAlB,EAAqC;MAAb,+DAAS,kBAAI;;AAC1C,MAAI,CAAC,IAAD,EAAO;AACT,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN,CADS;GAAX;;;;;AAD0C,MAQtC,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,EAAuC;;;;;AAKzC,QAAI,OAAO,KAAP,EAAc;AAChB,cAAQ,KAAR,CAAc,IAAd,EAAoB,MAApB,EADgB;KAAlB,MAEO;AACL,cAAQ,IAAR,CAAa,IAAb,EAAmB,MAAnB,EADK;KAFP;GALF;;AAYA,OAAK,QAAL,YAAe,cAAS,OAAxB;;;AApB0C,SAuBnC,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,OAAO,KAAP,EAAc;AAChB,aAAO,OAAO,KAAP,CAAP,CADgB;KAAlB,MAEO;AACL,cAAQ,OAAO,QAAP,GAAkB,OAAO,QAAP,GAAkB,MAApC,CAAR,CADK;KAFP;GADiB,CAAnB,CAvB0C;CAArC;;;;;AAmCA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,KAAhC,EAAoD;MAAb,+DAAS,kBAAI;MACjD,UAA8B,MAA9B,QADiD;MACxC,UAAqB,MAArB,QADwC;MAC/B,UAAY,MAAZ,QAD+B;;;AAGzD,WAAS,OAAT,EAAkB,MAAlB,EAHyD;AAIzD,SAAO,QAAQ,IAAR,CACL;WAAY,SAAS,OAAT,eAAsB,UAAQ,qBAA9B;GAAZ,EACA;WAAS,SAAS,OAAT,eAAsB,UAAQ,eAA9B;GAAT,CAFK,CAGL,KAHK,CAGC,QAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAHD,CAAP,CAJyD;CAApD;;kBAUQ","file":"ActorAppDispatcher.js","sourcesContent":["import { Dispatcher } from 'flux';\n\nconst flux = new Dispatcher();\n\nexport function register(callback) {\n  return flux.register(callback);\n}\n\nexport function waitFor(ids) {\n  return flux.waitFor(ids);\n}\n\n// Some Flux examples have methods like `handleViewAction`\n// or `handleServerAction` here. They are only useful if you\n// want to have extra pre-processing or logging for such actions,\n// but I found no need for them.\n\n/**\n * Dispatches a single action.\n */\nexport function dispatch(type, action = {}) {\n  if (!type) {\n    throw new Error('You forgot to specify type.');\n  }\n\n  // In production, thanks to DefinePlugin in webpack.config.production.js,\n  // this comparison will turn `false`, and UglifyJS will cut logging out\n  // as part of dead code elimination.\n  if (process.env.NODE_ENV !== 'production') {\n    // Logging all actions is useful for figuring out mistakes in code.\n    // All data that flows into our application comes in form of actions.\n    // Actions are just plain JavaScript objects describing “what happened”.\n    // Think of them as newspapers.\n    if (action.error) {\n      console.error(type, action);\n    } else {\n      console.info(type, action);\n    }\n  }\n\n  flux.dispatch({type, ...action});\n\n  // Return response or error for chaining async actions\n  return new Promise((resolve, reject) => {\n    if (action.error) {\n      reject(action.error);\n    } else {\n      resolve(action.response ? action.response : action);\n    }\n  })\n}\n\n/**\n * Dispatches three actions for an async operation represented by promise.\n */\nexport function dispatchAsync(promise, types, action = {}) {\n  const { request, success, failure } = types;\n\n  dispatch(request, action);\n  return promise.then(\n    response => dispatch(success, {...action, response}),\n    error => dispatch(failure, {...action, error})\n  ).catch(console.error.bind(console));\n}\n\nexport default flux;\n"]}