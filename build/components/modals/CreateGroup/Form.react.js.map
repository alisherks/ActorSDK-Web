{"version":3,"sources":["../../../../src/components/modals/CreateGroup/Form.react.js"],"names":[],"mappings":"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","file":"Form.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { map } from 'lodash';\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport { CreateGroupSteps } from '../../../constants/ActorAppConstants';\n\nimport CreateGroupActionCreators from '../../../actions/CreateGroupActionCreators';\n\nimport ContactStore from '../../../stores/PeopleStore';\nimport CreateGroupStore from '../../../stores/CreateGroupStore';\n\nimport ContactItem from './ContactItem.react';\n\nimport TextField from '../../common/TextField.react';\n\nclass CreateGroupForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores() {\n    return [ContactStore, CreateGroupStore];\n  }\n\n  static calculateState() {\n    return {\n      step: CreateGroupStore.getCurrentStep(),\n      name: CreateGroupStore.getGroupName(),\n      selectedUserIds: CreateGroupStore.getSelectedUserIds(),\n      contacts: ContactStore.getList()\n    }\n  }\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  componentDidMount() {\n    if (this.state.step === CreateGroupSteps.NAME_INPUT) {\n      this.refs.groupName.focus();\n    }\n  }\n\n  onContactToggle = (contact, isSelected) => {\n    const { selectedUserIds } = this.state;\n\n    if (isSelected) {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.add(contact.uid));\n    } else {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.remove(contact.uid));\n    }\n  };\n\n  handleNameChange = event => {\n    event.preventDefault();\n\n    this.setState({name: event.target.value});\n  };\n\n  handleNameSubmit = event => {\n    event.preventDefault();\n\n    const { name } = this.state;\n    const trimmedName = name.trim();\n\n    if (trimmedName.length > 0) {\n      CreateGroupActionCreators.setGroupName(trimmedName);\n    }\n  };\n\n  handleCreateGroup = event => {\n    const { name, selectedUserIds } = this.state;\n\n    event.preventDefault();\n    CreateGroupActionCreators.createGroup(name, null, selectedUserIds.toJS());\n  };\n\n  render() {\n    const { step, name, selectedUserIds, contacts } = this.state;\n    const { intl } = this.context;\n    let stepForm;\n\n    switch (step) {\n      case CreateGroupSteps.NAME_INPUT:\n        stepForm = (\n          <form className=\"group-name\">\n            <div className=\"modal-new__body\">\n              <TextField className=\"input__material--wide\"\n                         floatingLabel={intl.messages['modal.createGroup.groupName']}\n                         ref=\"groupName\"\n                         onChange={this.handleNameChange}\n                         value={name}/>\n            </div>\n\n            <footer className=\"modal-new__footer text-right\">\n              <button className=\"button button--lightblue\"\n                      onClick={this.handleNameSubmit}>\n                {intl.messages['button.addMembers']}\n              </button>\n            </footer>\n\n          </form>\n        );\n        break;\n\n      case CreateGroupSteps.CONTACTS_SELECTION:\n      case CreateGroupSteps.CREATION_STARTED:\n        let contactList = map(contacts, (contact, i) => {\n          return (\n            <ContactItem contact={contact} key={i} onToggle={this.onContactToggle}/>\n          );\n        });\n        stepForm = (\n          <form className=\"group-members\">\n            <div className=\"count\">\n              <FormattedMessage id=\"members\" values={{numMembers: selectedUserIds.size}}/>\n            </div>\n\n            <div className=\"modal-new__body\">\n              <ul className=\"contacts__list\">\n                {contactList}\n              </ul>\n            </div>\n\n            <footer className=\"modal-new__footer text-right\">\n              {\n                step === CreateGroupSteps.CREATION_STARTED\n                  ? <button className=\"button button--lightblue\"\n                            disabled>{intl.messages['button.createGroup']}</button>\n                  : <button className=\"button button--lightblue\"\n                            onClick={this.handleCreateGroup}>{intl.messages['button.createGroup']}</button>\n              }\n\n            </footer>\n          </form>\n        );\n        break;\n      default:\n    }\n\n    return stepForm;\n  }\n}\n\nexport default Container.create(CreateGroupForm, {pure: false});\n"]}