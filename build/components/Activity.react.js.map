{"version":3,"sources":["../../src/components/Activity.react.js"],"names":[],"mappings":";;;;AAIA;;;;AACA;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;IAEM;;;AACJ,WADI,eACJ,CAAY,KAAZ,EAAmB;0BADf,iBACe;;4CACjB,sBAAM,KAAN,GADiB;GAAnB;;AADI,kBAOG,2CAAiB;AACtB,WAAO;AACL,YAAM,sBAAY,cAAZ,EAAN;AACA,YAAM,0BAAgB,OAAhB,EAAN;AACA,cAAQ,wBAAc,MAAd,EAAR;KAHF,CADsB;;;AAPpB,4BAeJ,mCAAa;iBACoB,KAAK,KAAL,CADpB;QACH,uBADG;QACK,mBADL;QACW,mBADX;;AAEX,QAAI,CAAC,MAAD,EAAS;AACX,aAAO,IAAP,CADW;KAAb;;AAIA,YAAQ,KAAK,IAAL;AACN,WAAK,6BAAU,IAAV;AACH,eAAO,uDAAa,MAAM,IAAN,EAAb,CAAP,CADF;AADF,WAGO,6BAAU,KAAV;AACH,eAAO,wDAAc,OAAO,IAAP,EAAd,CAAP,CADF;AAHF;AAMI,eAAO,IAAP,CADF;AALF,KANW;;;AAfT,4BA+BJ,2BAAS;kBACwB,KAAK,KAAL,CADxB;QACC,oBADD;QACO,oBADP;QACa,wBADb;;AAEP,QAAI,SAAS,IAAT,EAAe;AACjB,aAAO,IAAP,CADiB;KAAnB;;AAIA,eAAW,YAAM;AACf,aAAO,aAAP,CAAqB,IAAI,KAAJ,CAAU,QAAV,CAArB,EADe;KAAN,EAER,CAFH,EANO;;AAUP,QAAM,oBAAoB,0BAAW,UAAX,EAAuB;AAC/C,yBAAmB,MAAnB;KADwB,CAApB,CAVC;;AAcP,WACE;;QAAS,WAAW,iBAAX,EAAT;MACG,KAAK,UAAL,EADH;KADF,CAdO;;;SA/BL;;;gBAKG,YAAY;SAAM;CAAN;;kBAgDN,iBAAU,MAAV,CAAiB,eAAjB,EAAkC,EAAC,MAAM,KAAN,EAAnC","file":"Activity.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\nimport { PeerTypes } from '../constants/ActorAppConstants';\n\nimport ActivityStore from '../stores/ActivityStore';\nimport DialogStore from '../stores/DialogStore';\nimport DialogInfoStore from '../stores/DialogInfoStore';\n\nimport UserProfile from './activity/UserProfile.react';\nimport GroupProfile from './activity/GroupProfile.react';\n\nclass ActivitySection extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores = () => [DialogStore, DialogInfoStore, ActivityStore];\n\n  static calculateState() {\n    return {\n      peer: DialogStore.getCurrentPeer(),\n      info: DialogInfoStore.getInfo(),\n      isOpen: ActivityStore.isOpen()\n    };\n  }\n\n  renderBody() {\n    const { isOpen, peer, info } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n\n    switch (peer.type) {\n      case PeerTypes.USER:\n        return <UserProfile user={info} />;\n      case PeerTypes.GROUP:\n        return <GroupProfile group={info}/>;\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { peer, info, isOpen } = this.state;\n    if (peer === null) {\n      return null;\n    }\n\n    setTimeout(() => {\n      window.dispatchEvent(new Event('resize'));\n    }, 0);\n\n    const activityClassName = classnames('activity', {\n      'activity--shown': isOpen\n    });\n\n    return (\n      <section className={activityClassName}>\n        {this.renderBody()}\n      </section>\n    );\n  }\n}\n\nexport default Container.create(ActivitySection, {pure: false});\n"]}