{"version":3,"sources":["../../src/components/Toolbar.react.js"],"names":[],"mappings":"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","file":"Toolbar.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { escapeWithEmoji } from '../utils/EmojiUtils';\nimport PeerUtils from '../utils/PeerUtils';\n\nimport ActivityActionCreators from '../actions/ActivityActionCreators';\nimport FavoriteActionCreators from '../actions/FavoriteActionCreators';\n\nimport AvatarItem from './common/AvatarItem.react';\nimport ToggleFavorite from './common/ToggleFavorite.react';\n\nimport DialogInfoStore from '../stores/DialogInfoStore';\nimport OnlineStore from '../stores/OnlineStore';\nimport ActivityStore from '../stores/ActivityStore';\nimport DialogStore from '../stores/DialogStore';\nimport CallStore from '../stores/CallStore';\n\nclass ToolbarSection extends Component {\n  static getStores = () => [DialogInfoStore, ActivityStore, OnlineStore, DialogStore, CallStore];\n\n  static calculateState() {\n    const thisPeer = DialogStore.getCurrentPeer();\n    return {\n      thisPeer,\n      dialogInfo: DialogInfoStore.getInfo(),\n      isActivityOpen: ActivityStore.isOpen(),\n      message: OnlineStore.getMessage(),\n      isFavorite: DialogStore.isFavorite(thisPeer.id),\n      call: ToolbarSection.calculateCallState(thisPeer)\n    };\n  }\n\n  static calculateCallState(thisPeer) {\n    const isCalling = CallStore.isOpen();\n    if (!isCalling) {\n      return {isCalling};\n    }\n\n    const callPeer = CallStore.getPeer();\n\n    return {\n      isCalling,\n      isSamePeer: PeerUtils.equals(thisPeer, callPeer),\n      state: CallStore.getState(),\n      time: '00:00'\n    };\n  }\n\n  static contextTypes = {\n    isExperimental: PropTypes.bool\n  };\n\n  onFavoriteToggle = () => {\n    const { thisPeer, isFavorite } = this.state;\n    if (isFavorite) {\n      FavoriteActionCreators.unfavoriteChat(thisPeer);\n    } else {\n      FavoriteActionCreators.favoriteChat(thisPeer);\n    }\n  };\n\n  onClick = () => {\n    if (!this.state.isActivityOpen) {\n      ActivityActionCreators.show();\n    } else {\n      ActivityActionCreators.hide();\n    }\n  };\n\n  getMessage() {\n    const { call, message } = this.state;\n    if (call.isCalling) {\n      return (\n        <FormattedMessage id={`toolbar.callState.${call.state}`} values={{time: call.time}} />\n      );\n    }\n\n    return message;\n  }\n\n  render() {\n    const { dialogInfo, isActivityOpen, isFavorite, call } = this.state;\n\n    if (!dialogInfo) {\n      return <header className=\"toolbar\" />;\n    }\n\n    const message = this.getMessage();\n\n    const headerClassName = classnames('toolbar row', {\n      toolbar__calling: call.isCalling && call.isSamePeer\n    });\n\n    const infoButtonClassName = classnames('button button--icon', {\n      'active': isActivityOpen\n    });\n\n    const favoriteClassName = classnames('toolbar__peer__favorite', {\n      'toolbar__peer__favorite--active': isFavorite\n    });\n\n    return (\n      <header className={headerClassName}>\n        <AvatarItem image={dialogInfo.avatar}\n                    placeholder={dialogInfo.placeholder}\n                    size=\"medium\"\n                    title={dialogInfo.name}/>\n\n\n        <div className=\"toolbar__peer col-xs\">\n          <header>\n            <span className=\"toolbar__peer__title\" dangerouslySetInnerHTML={{__html: escapeWithEmoji(dialogInfo.name)}}/>\n            <span className={favoriteClassName}>\n              <ToggleFavorite value={isFavorite} onToggle={this.onFavoriteToggle} />\n            </span>\n          </header>\n          <div className=\"toolbar__peer__message\">{message}</div>\n        </div>\n\n        <div className=\"toolbar__controls\">\n          <div className=\"toolbar__controls__buttons pull-right\">\n            <button className={infoButtonClassName} onClick={this.onClick}>\n              <i className=\"material-icons\">info</i>\n            </button>\n            <button className=\"button button--icon hide\">\n              <i className=\"material-icons\">more_vert</i>\n            </button>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Container.create(ToolbarSection, {pure: false});\n"]}