{"version":3,"sources":["../../../../src/components/dialog/messages/Contact.react.js"],"names":[],"mappings":";;;;AAIA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;IAKM;;;;;;;;;oBASJ,2BAAS;iBAC6C,KAAK,KAAL,CAD7C;QACC,mBADD;QACO,yBADP;QACgB,uBADhB;QACwB,qBADxB;QAC+B,6BAD/B;;AAEP,QAAM,mBAAmB,0BAAW,SAAX,EAAsB,KAAtB,CAAnB,CAFC;AAGP,QAAM,iBAAiB,OAAO,MAAP,KAAkB,CAAlB,IAAuB,MAAM,MAAN,KAAiB,CAAjB,CAHvC;;AAKP,QAAM,gBAAgB,UAClB;;QAAK,WAAU,iBAAV,EAAL;MAAiC,uCAAK,KAAK,4BAA4B,OAA5B,EAAqC,KAAK,IAAL,EAA/C,CAAjC;KADkB,GAElB,IAFkB,CALf;;AASP,QAAI,aAAa,EAAb;QAAiB,aAAa,EAAb,CATd;AAUP,QAAI,OAAO,MAAP,GAAgB,CAAhB,EAAmB;AACrB,mBAAa,iBAAI,MAAJ,EAAY,UAAC,KAAD,EAAQ,KAAR;eAAkB;;YAAI,WAAU,uBAAV,EAAkC,KAAK,KAAL,EAAtC;UAAkD;;cAAG,MAAM,YAAY,KAAZ,EAAT;YAA6B,KAA7B;WAAlD;;OAAlB,CAAzB,CADqB;KAAvB;;AAVO,QAcH,MAAM,MAAN,GAAe,CAAf,EAAkB;AACpB,mBAAa,iBAAI,KAAJ,EAAW,UAAC,KAAD,EAAQ,KAAR;eAAkB;;YAAI,WAAU,uBAAV,EAAkC,KAAK,KAAL,EAAtC;UAAkD;;cAAG,MAAM,SAAS,KAAT,EAAT;YAA0B,KAA1B;WAAlD;;OAAlB,CAAxB,CADoB;KAAtB;;AAIA,WACE;;QAAK,WAAW,gBAAX,EAAL;MAEI,iBACI;;UAAK,WAAU,4BAAV,EAAL;QACE;;YAAG,WAAU,gBAAV,EAAH;;SADF;;OADJ,GAII;;UAAK,WAAU,aAAV,EAAL;QACG,aADH;QAEE;;YAAK,WAAU,sBAAV,EAAL;UACE;;cAAK,WAAU,eAAV,EAAL;YAAgC,IAAhC;WADF;UAGI,WAAW,MAAX,GAAoB,CAApB,GACI;;cAAI,WAAU,iBAAV,EAAJ;YAAiC,UAAjC;WADJ,GAEI,IAFJ;UAKA,WAAW,MAAX,GAAoB,CAApB,GACI;;cAAI,WAAU,iBAAV,EAAJ;YAAiC,UAAjC;WADJ,GAEI,IAFJ;SAVN;OAJJ;MAqBF,uCAAK,WAAU,QAAV,EAAL,CAvBF;KADF,CAlBO;;;SATL;;;QACG,YAAY;AACjB,QAAM,iBAAU,MAAV,CAAiB,UAAjB;AACN,WAAS,iBAAU,MAAV,CAAiB,UAAjB;AACT,UAAQ,iBAAU,KAAV,CAAgB,UAAhB;AACR,SAAO,iBAAU,KAAV,CAAgB,UAAhB;AACP,aAAW,iBAAU,MAAV;;kBAmDA","file":"Contact.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { map } from 'lodash';\nimport React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\n\n/**\n * Class that represents a component for display contact message content\n */\nclass Contact extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    photo64: PropTypes.string.isRequired,\n    emails: PropTypes.array.isRequired,\n    pones: PropTypes.array.isRequired,\n    className: PropTypes.string\n  };\n\n  render() {\n    const { name, photo64, emails, pones, className } = this.props;\n    const contactClassName = classnames(className, 'row');\n    const isContactEmpty = emails.length === 0 && pones.length === 0;\n\n    const contactAvatar = photo64\n      ? <div className=\"contact__avatar\"><img src={'data:image/jpeg;base64,' + photo64} alt={name}/></div>\n      : null;\n\n    let emaislList = [], phonesList = [];\n    if (emails.length > 0) {\n      emaislList = map(emails, (email, index) => <li className=\"contact__emails__item\" key={index}><a href={'mailto:' + email}>{email}</a></li>)\n    }\n    // TODO: `pones` must be renamed to `phones` in library\n    if (pones.length > 0) {\n      phonesList = map(pones, (phone, index) => <li className=\"contact__phones__item\" key={index}><a href={'tel:' + phone}>{phone}</a></li>)\n    }\n\n    return (\n      <div className={contactClassName}>\n        {\n          isContactEmpty\n            ? <div className=\"contact contact--empty row\">\n                <i className=\"material-icons\">error</i>Empty contact\n              </div>\n            : <div className=\"contact row\">\n                {contactAvatar}\n                <div className=\"contact__body col-xs\">\n                  <div className=\"contact__name\">{name}</div>\n                  {\n                    emaislList.length > 0\n                      ? <ul className=\"contact__emails\">{emaislList}</ul>\n                      : null\n                  }\n                  {\n                    phonesList.length > 0\n                      ? <ul className=\"contact__phones\">{phonesList}</ul>\n                      : null\n                  }\n                </div>\n              </div>\n        }\n        <div className=\"col-xs\"/>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n"]}