{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":[],"mappings":";;;;AAAA;;;;AAEA;;AAEA;;;;;;kBAEe;AACb,sCAAa,MAAM;AACjB,YAAQ,KAAK,IAAL;AACN,WAAK,6BAAU,IAAV;AACH,eAAO,oCAAiB,IAAjB,GAAwB,KAAK,EAAL,CADjC;AADF,WAGO,6BAAU,KAAV;AACH,eAAO,oCAAiB,KAAjB,GAAyB,KAAK,EAAL,CADlC;AAHF;AAMI,cAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAK,IAAL,GAAY,GAApC,GAA0C,KAAK,EAAL,CAA1D,CADF;AALF,KADiB;GADN;AAYb,sCAAa,KAAK;AAChB,QAAM,SAAS,SAAS,IAAI,SAAJ,CAAc,CAAd,CAAT,EAA2B,EAA3B,CAAT,CADU;AAEhB,YAAQ,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAR;AACE,WAAK,oCAAiB,IAAjB;AACH,eAAO,sBAAY,WAAZ,CAAwB,MAAxB,CAAP,CADF;AADF,WAGO,oCAAiB,KAAjB;AACH,eAAO,sBAAY,YAAZ,CAAyB,MAAzB,CAAP,CADF;AAHF;AAMI,cAAM,IAAI,KAAJ,CAAU,wBAAwB,GAAxB,CAAhB,CADF;AALF,KAFgB;GAZL;AAwBb,4BAAQ,MAAM;AACZ,QAAI;AACF,cAAQ,KAAK,IAAL;AACN,aAAK,6BAAU,IAAV;AACH,iBAAO,sBAAY,OAAZ,CAAoB,KAAK,EAAL,CAA3B,CADF;AADF,aAGO,6BAAU,KAAV;AACH,iBAAO,sBAAY,QAAZ,CAAqB,KAAK,EAAL,CAA5B,CADF;AAHF,OADE;KAAJ,CAOE,OAAO,CAAP,EAAU;AACV,cAAQ,KAAR,CAAc,CAAd,EADU;KAAV;;AAIF,WAAO,KAAP,CAZY;GAxBD;AAuCb,0BAAO,OAAO,OAAO;AACnB,WACE,gBAAC,CAAE,aAAF,CAAgB,KAAhB,KAA0B,CAAC,iBAAE,aAAF,CAAgB,KAAhB,CAAD,IAC1B,CAAC,iBAAE,aAAF,CAAgB,KAAhB,CAAD,IAA2B,iBAAE,aAAF,CAAgB,KAAhB,CAA3B,IACA,MAAM,IAAN,KAAe,MAAM,IAAN,IAAc,MAAM,EAAN,KAAa,MAAM,EAAN,CAJ1B;GAvCR","file":"PeerUtils.js","sourcesContent":["import _ from 'lodash';\n\nimport { PeerTypes, PeerTypePrefixes } from '../constants/ActorAppConstants';\n\nimport ActorClient from './ActorClient';\n\nexport default {\n  peerToString(peer) {\n    switch (peer.type) {\n      case PeerTypes.USER:\n        return PeerTypePrefixes.USER + peer.id;\n      case PeerTypes.GROUP:\n        return PeerTypePrefixes.GROUP + peer.id;\n      default:\n        throw new Error('Unknown peer type: ' + peer.type + ' ' + peer.id);\n    }\n  },\n\n  stringToPeer(str) {\n    const peerId = parseInt(str.substring(1), 10);\n    switch (str.substring(0, 1)) {\n      case PeerTypePrefixes.USER:\n        return ActorClient.getUserPeer(peerId);\n      case PeerTypePrefixes.GROUP:\n        return ActorClient.getGroupPeer(peerId);\n      default:\n        throw new Error('Unknown peer type: ' + str);\n    }\n  },\n\n  hasPeer(peer) {\n    try {\n      switch (peer.type) {\n        case PeerTypes.USER:\n          return ActorClient.getUser(peer.id);\n        case PeerTypes.GROUP:\n          return ActorClient.getGroup(peer.id);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return false;\n  },\n\n  equals(peer1, peer2) {\n    return (\n      (_.isPlainObject(peer1) && !_.isPlainObject(peer2)) ||\n      (!_.isPlainObject(peer1) && _.isPlainObject(peer2)) ||\n      (peer1.type === peer2.type && peer1.id === peer2.id)\n    );\n  }\n};\n"]}