{"version":3,"sources":["../../src/actions/CallActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAM,mBAAmB,IAAnB;;kBAES;AACb,wBAAO;AACL,sCAAS,+BAAY,eAAZ,CAAT,CADK;GADM;AAKb,kCAAW,OAAO;;;QACR,KAAa,MAAb,GADQ;QACJ,OAAS,MAAT,KADI;;AAEhB,YAAQ,IAAR;AACE,WAAK,6BAAU,OAAV;AACH,8BAAY,QAAZ,CAAqB,EAArB,EAAyB,KAAK,OAAL,CAAzB,CADF;AAEE,0CAAS,+BAAY,eAAZ,EAA6B,EAAE,MAAF,EAAtC,EAFF;AAGE,cAHF;AADF,WAKO,6BAAU,KAAV;AACH,mBAAW,YAAM;AACf,gCAAY,UAAZ,CAAuB,EAAvB,EAA2B,MAAK,OAAL,CAA3B,CADe;AAEf,cAAI,oBAAU,MAAV,EAAJ,EAAwB,kCAAS,+BAAY,eAAZ,CAAT,CAAxB;SAFS,EAGR,gBAHH,EADF;AAKE,cALF;AALF;KAFgB;GALL;AAsBb,8BAAS,QAAQ;AACf,2CAAc,sBAAY,QAAZ,CAAqB,MAArB,CAAd,EAA4C;AAC1C,eAAS,+BAAY,IAAZ;AACT,eAAS,+BAAY,YAAZ;AACT,eAAS,+BAAY,UAAZ;KAHX,EAIG,EAAE,cAAF,EAJH,EADe;GAtBJ;AA8Bb,wCAAc,QAAQ;AACpB,2CAAc,sBAAY,aAAZ,CAA0B,MAA1B,CAAd,EAAiD;AAC/C,eAAS,+BAAY,IAAZ;AACT,eAAS,+BAAY,YAAZ;AACT,eAAS,+BAAY,UAAZ;KAHX,EAIG,EAAE,cAAF,EAJH,EADoB;GA9BT;AAsCb,4BAAQ,MAAM;AACZ,sCAAS,+BAAY,YAAZ,EAA0B,EAAE,UAAF,EAAnC,EADY;GAtCD;AA0Cb,kCAAW,QAAQ;AACjB,0BAAY,UAAZ,CAAuB,MAAvB,EADiB;AAEjB,sCAAS,+BAAY,WAAZ,EAAyB,EAAE,cAAF,EAAlC,EAFiB;GA1CN;AA+Cb,4BAAQ,QAAQ;AACd,0BAAY,OAAZ,CAAoB,MAApB,EADc;AAEd,sCAAS,+BAAY,QAAZ,EAAsB,EAAE,cAAF,EAA/B,EAFc;GA/CH;AAoDb,0CAAe,QAAQ;AACrB,0BAAY,cAAZ,CAA2B,MAA3B,EADqB;AAErB,sCAAS,+BAAY,gBAAZ,EAA8B,EAAE,cAAF,EAAvC,EAFqB;GApDV","file":"CallActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, CallTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport CallStore from '../stores/CallStore';\n\nconst HIDE_MODAL_AFTER = 3000;\n\nexport default {\n  hide() {\n    dispatch(ActionTypes.CALL_MODAL_HIDE);\n  },\n\n  handleCall(event) {\n    const { id, type } = event;\n    switch (type) {\n      case CallTypes.STARTED:\n        ActorClient.bindCall(id, this.setCall);\n        dispatch(ActionTypes.CALL_MODAL_OPEN, { id });\n        break;\n      case CallTypes.ENDED:\n        setTimeout(() => {\n          ActorClient.unbindCall(id, this.setCall);\n          if (CallStore.isOpen()) dispatch(ActionTypes.CALL_MODAL_HIDE);\n        }, HIDE_MODAL_AFTER);\n        break;\n      default:\n    }\n  },\n\n  makeCall(peerId) {\n    dispatchAsync(ActorClient.makeCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  },\n\n  makeGroupCall(peerId) {\n    dispatchAsync(ActorClient.makeGroupCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  },\n\n  setCall(call) {\n    dispatch(ActionTypes.CALL_CHANGED, { call });\n  },\n\n  answerCall(callId) {\n    ActorClient.answerCall(callId);\n    dispatch(ActionTypes.CALL_ANSWER, { callId })\n  },\n\n  endCall(callId) {\n    ActorClient.endCall(callId);\n    dispatch(ActionTypes.CALL_END, { callId })\n  },\n\n  toggleCallMute(callId) {\n    ActorClient.toggleCallMute(callId);\n    dispatch(ActionTypes.CALL_MUTE_TOGGLE, { callId })\n  }\n}\n"]}